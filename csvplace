import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class CsvReplacer {

    public static void main(String[] args) {
        String folderPath = "your_folder_path";
        String beforeCsvPath = "path_to_before.csv";
        String afterCsvPath = "path_to_after.csv";

        // 读取替换规则
        Map<String, String> replacementMap = loadReplacementMap(beforeCsvPath, afterCsvPath);

        // 遍历文件夹进行替换
        try {
            Files.walkFileTree(Paths.get(folderPath), EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    if (attrs.isRegularFile()) {
                        replaceTextInFile(file, replacementMap);
                    }
                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            System.err.println("Error walking through the folder: " + folderPath);
            e.printStackTrace();
        }
    }

    private static Map<String, String> loadReplacementMap(String beforeCsvPath, String afterCsvPath) {
        Map<String, String> map = new HashMap<>();
        try (BufferedReader beforeReader = new BufferedReader(new FileReader(beforeCsvPath));
             BufferedReader afterReader = new BufferedReader(new FileReader(afterCsvPath))) {
             
            String beforeLine;
            String afterLine;

            while ((beforeLine = beforeReader.readLine()) != null && (afterLine = afterReader.readLine()) != null) {
                map.put(beforeLine, afterLine);
            }
        } catch (IOException e) {
            System.err.println("Error reading CSV files.");
            e.printStackTrace();
        }
        return map;
    }

    private static void replaceTextInFile(Path file, Map<String, String> replacementMap) {
        try {
            // 读取文件内容
            String content = new String(Files.readAllBytes(file), StandardCharsets.UTF_8);

            // 进行替换
            for (Map.Entry<String, String> entry : replacementMap.entrySet()) {
                content = content.replace(entry.getKey(), entry.getValue());
            }

            // 写回文件
            Files.write(file, content.getBytes(StandardCharsets.UTF_8));
        } catch (IOException e) {
            System.err.println("Error processing file: " + file);
            e.printStackTrace();
        }
    }
}
